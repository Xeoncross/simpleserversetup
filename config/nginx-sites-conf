# Master config for unlimited domains as long as you add the 
# entry to /etc/hosts and create the matching $domain folder
# The only problem with this approach is that you can't disable
# individual sites by unlinking the config. The work around
# is creating a "system_maintenance.html" file in the site root
server {
	listen 80 default_server;
	listen 443 default_server ssl;
	listen [::]:80 default_server ipv6only=on;
	listen [::]:443 default_server ssl ipv6only=on;
	
	index index.html index.php;
	
	# Catch-all name for multiple sites
	server_name ~^(www\.)?(?<domain>.+)$;
	root /var/www/$domain/public;
	
	# https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# Remember to test your server: https://www.ssllabs.com/ssltest/
	ssl_ciphers					ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
	ssl_prefer_server_ciphers	on;
	ssl_protocols				SSLv3 TLSv1 TLSv1.1 TLSv1.2;
	ssl_session_cache			shared:SSL:8M;
	ssl_session_timeout			10m;
	
	# Default Global Certificate
	ssl_certificate			/etc/ssl/certs/ssl-cert-snakeoil.pem;
	ssl_certificate_key		/etc/ssl/private/ssl-cert-snakeoil.key;

	# Site Specific
    # ssl_certificate		/etc/nginx/ssl/$domain.crt;
    # ssl_certificate_key	/etc/nginx/ssl/$domain.key; 

	# Directives to send expires headers [Enable for production]
	#location ~* [.](?:atom|jsonp?|ow[lx]|rdf|rss|xml)$ {
	#	expires			1h;
	#}

	#location ~* [.](?:(?:css|js|less)|(?:eot|otf|tt[cf]|woff)|(?:cur|flv|gif|htc|ico|jpe?g|mp[34]|og[agv]|png|svgz?|swf|tiff?|web[mp]))$ {
	#	expires			1y;
	#}

	location /favicon.ico {
		expires			1w;
		log_not_found	off;
	}

	# These files pose a threat. Deny by default.
	location ~* /(?:[.]|.*[.](?:bak|[a-z]?db|fla|in[ci]|log|phar|psd|sh|sql|sw[op])|(?:file|upload)s?/.*[.](?:php)) {
		deny			all;
	}
 
	# Route all requests for non-existent files to index.php
	location / {

		# System Maintenance (Service Unavailable)
		if (-f $document_root/system_maintenance.html ) {
			error_page 503 /system_maintenance.html;
			return 503;
		}
		
		try_files $uri $uri/ /index.php$is_args$args;
	}
 
	# Pass PHP scripts to php-fastcgi listening on port 9000
	location ~ \.php$ {
 
		# Zero-day exploit defense.
		# http://forum.nginx.org/read.php?2,88845,page=3
		# Won't work properly (404 error) if the file is not stored on 
		# this server,  which is entirely possible with php-fpm/php-fcgi.
		# Comment the 'try_files' line out if you set up php-fpm/php-fcgi
		# on another machine.  And then cross your fingers that you won't get hacked.
		try_files $uri =404;
 
		include fastcgi_params;
		proxy_http_version	1.1;
		proxy_buffering		off;
		proxy_redirect		off;
		proxy_set_header	Host $host;
		proxy_set_header	X-Real-IP $remote_addr;
		proxy_set_header	X-Forwarded-For $proxy_add_x_forwarded_for;

		# If this is a single machine use the (php5-fpm default) unix socket
		fastcgi_pass unix:/var/run/php5-fpm.sock;

		# If you have multiple PHP servers setup behind this proxy
		# or you have PHP-FPM listening on TCP
		# fastcgi_pass 127.0.0.1:9000;
	}
}
 
# PHP search for file Exploit:
# The PHP regex location block fires instead of the try_files block. Therefore we need
# to add "try_files $uri =404;" to make sure that "/uploads/virusimage.jpg/hello.php"
# never executes the hidden php code inside virusimage.jpg because it can't find hello.php!
# The exploit also can be stopped by adding "cgi.fix_pathinfo = 0" in your php.ini file. 